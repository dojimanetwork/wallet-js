// source: query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return Function("return this")();
}.call(null);

goog.exportSymbol("proto.BlockRequest", null, global);
goog.exportSymbol("proto.BlockResponse", null, global);
goog.exportSymbol("proto.BroadcastRequest", null, global);
goog.exportSymbol("proto.BroadcastResponse", null, global);
goog.exportSymbol("proto.Chain", null, global);
goog.exportSymbol("proto.ChainRPCMethodRequest", null, global);
goog.exportSymbol("proto.ChainRPCMethodResponse", null, global);
goog.exportSymbol("proto.SOLDataRequest", null, global);
goog.exportSymbol("proto.TestRequest", null, global);
goog.exportSymbol("proto.TestResponse", null, global);
goog.exportSymbol("proto.TransactionRequest", null, global);
goog.exportSymbol("proto.TransactionResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChainRPCMethodRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChainRPCMethodRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChainRPCMethodRequest.displayName = "proto.ChainRPCMethodRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChainRPCMethodResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChainRPCMethodResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChainRPCMethodResponse.displayName = "proto.ChainRPCMethodResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BroadcastRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BroadcastRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BroadcastRequest.displayName = "proto.BroadcastRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BroadcastResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BroadcastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BroadcastResponse.displayName = "proto.BroadcastResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Chain = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Chain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Chain.displayName = "proto.Chain";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockRequest.displayName = "proto.BlockRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockResponse.displayName = "proto.BlockResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionRequest.displayName = "proto.TransactionRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionResponse.displayName = "proto.TransactionResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SOLDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SOLDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SOLDataRequest.displayName = "proto.SOLDataRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TestRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TestRequest.displayName = "proto.TestRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TestResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TestResponse.displayName = "proto.TestResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ChainRPCMethodRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.ChainRPCMethodRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ChainRPCMethodRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ChainRPCMethodRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        methodname: jspb.Message.getFieldWithDefault(msg, 2, ""),
        methoddata: msg.getMethoddata_asB64(),
        pubkey: msg.getPubkey_asB64(),
        signature: msg.getSignature_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChainRPCMethodRequest}
 */
proto.ChainRPCMethodRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChainRPCMethodRequest();
  return proto.ChainRPCMethodRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChainRPCMethodRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChainRPCMethodRequest}
 */
proto.ChainRPCMethodRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMethodname(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setMethoddata(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPubkey(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChainRPCMethodRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ChainRPCMethodRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChainRPCMethodRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChainRPCMethodRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getMethodname();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMethoddata_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.ChainRPCMethodRequest.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.ChainRPCMethodRequest} returns this
 */
proto.ChainRPCMethodRequest.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.ChainRPCMethodRequest} returns this
 */
proto.ChainRPCMethodRequest.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChainRPCMethodRequest.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string MethodName = 2;
 * @return {string}
 */
proto.ChainRPCMethodRequest.prototype.getMethodname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.ChainRPCMethodRequest} returns this
 */
proto.ChainRPCMethodRequest.prototype.setMethodname = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bytes MethodData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ChainRPCMethodRequest.prototype.getMethoddata = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/**
 * optional bytes MethodData = 3;
 * This is a type-conversion wrapper around `getMethoddata()`
 * @return {string}
 */
proto.ChainRPCMethodRequest.prototype.getMethoddata_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMethoddata()));
};

/**
 * optional bytes MethodData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMethoddata()`
 * @return {!Uint8Array}
 */
proto.ChainRPCMethodRequest.prototype.getMethoddata_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getMethoddata())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ChainRPCMethodRequest} returns this
 */
proto.ChainRPCMethodRequest.prototype.setMethoddata = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes pubkey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ChainRPCMethodRequest.prototype.getPubkey = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/**
 * optional bytes pubkey = 4;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.ChainRPCMethodRequest.prototype.getPubkey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPubkey()));
};

/**
 * optional bytes pubkey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.ChainRPCMethodRequest.prototype.getPubkey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPubkey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ChainRPCMethodRequest} returns this
 */
proto.ChainRPCMethodRequest.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ChainRPCMethodRequest.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};

/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ChainRPCMethodRequest.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ChainRPCMethodRequest.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSignature())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ChainRPCMethodRequest} returns this
 */
proto.ChainRPCMethodRequest.prototype.setSignature = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ChainRPCMethodResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.ChainRPCMethodResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ChainRPCMethodResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ChainRPCMethodResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        result: msg.getResult_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChainRPCMethodResponse}
 */
proto.ChainRPCMethodResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChainRPCMethodResponse();
  return proto.ChainRPCMethodResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChainRPCMethodResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChainRPCMethodResponse}
 */
proto.ChainRPCMethodResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChainRPCMethodResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ChainRPCMethodResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChainRPCMethodResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChainRPCMethodResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes result = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChainRPCMethodResponse.prototype.getResult = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/**
 * optional bytes result = 1;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.ChainRPCMethodResponse.prototype.getResult_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getResult()));
};

/**
 * optional bytes result = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.ChainRPCMethodResponse.prototype.getResult_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getResult()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ChainRPCMethodResponse} returns this
 */
proto.ChainRPCMethodResponse.prototype.setResult = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.BroadcastRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.BroadcastRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.BroadcastRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.BroadcastRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        payload: msg.getPayload_asB64(),
        pubkey: msg.getPubkey_asB64(),
        signature: msg.getSignature_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BroadcastRequest}
 */
proto.BroadcastRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BroadcastRequest();
  return proto.BroadcastRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BroadcastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BroadcastRequest}
 */
proto.BroadcastRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPayload(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPubkey(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BroadcastRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.BroadcastRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BroadcastRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BroadcastRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.BroadcastRequest.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.BroadcastRequest} returns this
 */
proto.BroadcastRequest.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.BroadcastRequest} returns this
 */
proto.BroadcastRequest.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BroadcastRequest.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BroadcastRequest.prototype.getPayload = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.BroadcastRequest.prototype.getPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.BroadcastRequest.prototype.getPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BroadcastRequest} returns this
 */
proto.BroadcastRequest.prototype.setPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes pubkey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.BroadcastRequest.prototype.getPubkey = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/**
 * optional bytes pubkey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.BroadcastRequest.prototype.getPubkey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPubkey()));
};

/**
 * optional bytes pubkey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.BroadcastRequest.prototype.getPubkey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPubkey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BroadcastRequest} returns this
 */
proto.BroadcastRequest.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.BroadcastRequest.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.BroadcastRequest.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.BroadcastRequest.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSignature())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BroadcastRequest} returns this
 */
proto.BroadcastRequest.prototype.setSignature = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.BroadcastResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.BroadcastResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.BroadcastResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.BroadcastResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        txnhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BroadcastResponse}
 */
proto.BroadcastResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BroadcastResponse();
  return proto.BroadcastResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BroadcastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BroadcastResponse}
 */
proto.BroadcastResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxnhash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BroadcastResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.BroadcastResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BroadcastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BroadcastResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTxnhash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string txnhash = 1;
 * @return {string}
 */
proto.BroadcastResponse.prototype.getTxnhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.BroadcastResponse} returns this
 */
proto.BroadcastResponse.prototype.setTxnhash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Chain.prototype.toObject = function (opt_includeInstance) {
    return proto.Chain.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Chain} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Chain.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        id: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Chain}
 */
proto.Chain.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Chain();
  return proto.Chain.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Chain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Chain}
 */
proto.Chain.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTicker(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Chain.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Chain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Chain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Chain.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.Chain.prototype.getTicker = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.Chain} returns this
 */
proto.Chain.prototype.setTicker = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.Chain.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.Chain} returns this
 */
proto.Chain.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string id = 3;
 * @return {string}
 */
proto.Chain.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.Chain} returns this
 */
proto.Chain.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.BlockRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.BlockRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.BlockRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.BlockRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        blocknum: jspb.Message.getFieldWithDefault(msg, 2, 0),
        pubkey: msg.getPubkey_asB64(),
        signature: msg.getSignature_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockRequest}
 */
proto.BlockRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockRequest();
  return proto.BlockRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockRequest}
 */
proto.BlockRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setBlocknum(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPubkey(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.BlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getBlocknum();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.BlockRequest.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.BlockRequest} returns this
 */
proto.BlockRequest.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.BlockRequest} returns this
 */
proto.BlockRequest.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BlockRequest.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int32 blockNum = 2;
 * @return {number}
 */
proto.BlockRequest.prototype.getBlocknum = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.BlockRequest} returns this
 */
proto.BlockRequest.prototype.setBlocknum = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes pubkey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.BlockRequest.prototype.getPubkey = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/**
 * optional bytes pubkey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.BlockRequest.prototype.getPubkey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPubkey()));
};

/**
 * optional bytes pubkey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.BlockRequest.prototype.getPubkey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPubkey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockRequest} returns this
 */
proto.BlockRequest.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.BlockRequest.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.BlockRequest.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.BlockRequest.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSignature())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockRequest} returns this
 */
proto.BlockRequest.prototype.setSignature = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.BlockResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.BlockResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.BlockResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.BlockResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        blcinbytestr: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockResponse}
 */
proto.BlockResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockResponse();
  return proto.BlockResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockResponse}
 */
proto.BlockResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setBlcinbytestr(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.BlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getBlcinbytestr();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.BlockResponse.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.BlockResponse} returns this
 */
proto.BlockResponse.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.BlockResponse} returns this
 */
proto.BlockResponse.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BlockResponse.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string blcInByteStr = 2;
 * @return {string}
 */
proto.BlockResponse.prototype.getBlcinbytestr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.BlockResponse} returns this
 */
proto.BlockResponse.prototype.setBlcinbytestr = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TransactionRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.TransactionRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TransactionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TransactionRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        txhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
        blocknum: jspb.Message.getFieldWithDefault(msg, 3, 0),
        pubkey: msg.getPubkey_asB64(),
        signature: msg.getSignature_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionRequest}
 */
proto.TransactionRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionRequest();
  return proto.TransactionRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionRequest}
 */
proto.TransactionRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxhash(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setBlocknum(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPubkey(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.TransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBlocknum();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.TransactionRequest.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransactionRequest.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string txHash = 2;
 * @return {string}
 */
proto.TransactionRequest.prototype.getTxhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setTxhash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 blockNum = 3;
 * @return {number}
 */
proto.TransactionRequest.prototype.getBlocknum = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setBlocknum = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes pubkey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.TransactionRequest.prototype.getPubkey = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/**
 * optional bytes pubkey = 4;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.TransactionRequest.prototype.getPubkey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPubkey()));
};

/**
 * optional bytes pubkey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.TransactionRequest.prototype.getPubkey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPubkey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.TransactionRequest.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};

/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.TransactionRequest.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.TransactionRequest.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSignature())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setSignature = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TransactionResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.TransactionResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TransactionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TransactionResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        txhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
        txninbytestr: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionResponse}
 */
proto.TransactionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionResponse();
  return proto.TransactionResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionResponse}
 */
proto.TransactionResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxhash(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxninbytestr(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.TransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTxninbytestr();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.TransactionResponse.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransactionResponse.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string txHash = 2;
 * @return {string}
 */
proto.TransactionResponse.prototype.getTxhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setTxhash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string txnInByteStr = 3;
 * @return {string}
 */
proto.TransactionResponse.prototype.getTxninbytestr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setTxninbytestr = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.SOLDataRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.SOLDataRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.SOLDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.SOLDataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chain: (f = msg.getChain()) && proto.Chain.toObject(includeInstance, f),
        accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SOLDataRequest}
 */
proto.SOLDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SOLDataRequest();
  return proto.SOLDataRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SOLDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SOLDataRequest}
 */
proto.SOLDataRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Chain();
        reader.readMessage(value, proto.Chain.deserializeBinaryFromReader);
        msg.setChain(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountaddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SOLDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.SOLDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SOLDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SOLDataRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(1, f, proto.Chain.serializeBinaryToWriter);
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional Chain chain = 1;
 * @return {?proto.Chain}
 */
proto.SOLDataRequest.prototype.getChain = function () {
  return /** @type{?proto.Chain} */ (
    jspb.Message.getWrapperField(this, proto.Chain, 1)
  );
};

/**
 * @param {?proto.Chain|undefined} value
 * @return {!proto.SOLDataRequest} returns this
 */
proto.SOLDataRequest.prototype.setChain = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.SOLDataRequest} returns this
 */
proto.SOLDataRequest.prototype.clearChain = function () {
  return this.setChain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SOLDataRequest.prototype.hasChain = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string accountAddress = 2;
 * @return {string}
 */
proto.SOLDataRequest.prototype.getAccountaddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.SOLDataRequest} returns this
 */
proto.SOLDataRequest.prototype.setAccountaddress = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TestRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.TestRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TestRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TestRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TestRequest}
 */
proto.TestRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TestRequest();
  return proto.TestRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TestRequest}
 */
proto.TestRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TestRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.TestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TestRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TestResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.TestResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TestResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TestResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TestResponse}
 */
proto.TestResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TestResponse();
  return proto.TestResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TestResponse}
 */
proto.TestResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMsg(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TestResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.TestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TestResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string msg = 1;
 * @return {string}
 */
proto.TestResponse.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.TestResponse} returns this
 */
proto.TestResponse.prototype.setMsg = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

goog.object.extend(exports, proto);
